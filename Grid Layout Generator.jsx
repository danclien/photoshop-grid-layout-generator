// Copyright Â© 2009 by Dan Lien.  All rights reserved.// Creates a layout grid based on the 960.gs grid system.// http://danclien.com// enable double clicking from the Macintosh Finder or the Windows Explorer#target photoshop// in case we double clicked the fileapp.bringToFront();// debug level: 0-2 (0:disable, 1:break on error, 2:break at beginning)$.level = 0;//debugger; // launch debugger on next line//Default valuesvar dclColumnCount = '12';var dclColumnWidth = '60';var dclGutterWidth = '20';var dclPageMargin = '50';var dclPageHeight = '800';function dclMain(){	showOptions();}function showAlert(text){	var dlgAlert = new Window('dialog', 'Error');	dlgAlert.add('statictext', undefined, text);	dlgAlert.gButtons = dlgAlert.add('group', undefined);	dlgAlert.gButtons.btnOk = dlgAlert.gButtons.add('button', undefined, 'OK', {name: 'ok'});	dlgAlert.show();}function showOptions(){	var dlg = new Window('dialog', 'Layout Grid Generator by Dan Lien');	dlg.pOptions = dlg.add('panel', [10,10,240,200], 'Options');		dlg.pOptions.add('statictext', [10,15,160,150], 'Number of columns:');	dlg.pOptions.add('statictext', [10,40,160,150], 'Column width:');	dlg.pOptions.add('statictext', [10,65,160,150], 'Gutter width:');	dlg.pOptions.add('statictext', [10,90,160,150], 'Page left/right margin:');	dlg.pOptions.add('statictext', [10,115,160,150], 'Page height:');	dlg.pOptions.add('statictext', [72,155,240,190], 'danclien.com');			dlg.pOptions.txtColumnCount = dlg.pOptions.add('edittext', [165, 14, 215, 33],dclColumnCount);	dlg.pOptions.txtColumnWidth = dlg.pOptions.add('edittext', [165, 39, 215, 58],dclColumnWidth);	dlg.pOptions.txtGutterWidth = dlg.pOptions.add('edittext', [165, 64, 215, 83],dclGutterWidth);	dlg.pOptions.txtPageMargin = dlg.pOptions.add('edittext', [165, 89, 215, 108],dclPageMargin);	dlg.pOptions.txtPageHeight = dlg.pOptions.add('edittext', [165, 114, 215, 133],dclPageHeight);	dlg.gButtons = dlg.add('group', undefined);	dlg.gButtons.btnCancel = dlg.gButtons.add('button', undefined, 'Cancel', {name: 'cancel'});	dlg.gButtons.btnCancel = dlg.gButtons.add('button', undefined, 'Generate', {name: 'ok'});			dlg.center();	var result = dlg.show();	if(result == 1)	{		dclColumnCount = dlg.pOptions.txtColumnCount.text;		dclColumnWidth = dlg.pOptions.txtColumnWidth.text;		dclGutterWidth = dlg.pOptions.txtGutterWidth.text;		dclPageMargin = dlg.pOptions.txtPageMargin.text;		dclPageHeight = dlg.pOptions.txtPageHeight.text;				var columnCount = parseInt(dlg.pOptions.txtColumnCount.text);		var columnWidth = parseInt(dlg.pOptions.txtColumnWidth.text);		var gutterWidth =  parseInt(dlg.pOptions.txtGutterWidth.text);		var pageMargin = parseInt(dlg.pOptions.txtPageMargin.text);		var pageHeight = parseInt(dlg.pOptions.txtPageHeight.text);		var isValid = true;				if(!(columnCount > 0))		{			isValid = false;			showAlert("Number of columns must be greater than 0.");		}		if(!(columnWidth > 0))		{			isValid = false;			showAlert("Column width must be greater than 0.");		}		if(!(gutterWidth >= 0))		{			isValid = false;			showAlert("Gutter width must be greater than or equal to 0.");		}		if(!(pageMargin >= 0))		{			isValid = false;			showAlert("Test");			showAlert("Page left/right margin must be greater than or equal to 0.");					}		if(!(pageHeight >= 0))		{			isValid = false;			showAlert("Page height must be greater than 0.");		}			if(dclGutterWidth % 2 == 1)		{			isValid = false;			showAlert("Gutter width must be an even number.");		}					if(isValid)		{			dclGenerateLayoutGrid(columnCount,columnWidth,gutterWidth,pageMargin,pageHeight);		}		else		{					showOptions();		}			}		}function dclAddGuide0(){	app.doAction("dclMakeGuide0", "dclScriptLibrary");}function dclAddLeftPadding(document, width){	document.resizeCanvas(		UnitValue((document.width.value + width) + "px"),		document.height,		AnchorPosition.MIDDLERIGHT)}function dclSelectRectangle(document, x, y, width, height){	var p1 = Array(x, y);	var p2 = Array(x+width, y);	var p3 = Array(x+width, y+height);	var p4 = Array(x, y + height);	document.selection.select(Array(p1,p2,p3,p4));}function dclFillSelection(document, color){	document.selection.fill(color, ColorBlendMode.NORMAL, 100, false);}function dclTest(){		dclGenerateLayoutGrid(12, 60, 20, 50, 800);}function dclGenerateLayoutGrid(lggColumnCount, lggColumnWidth, lggGutterWidth, lggPageMargin, lggPageHeight){	var i = 0;	var lggGridWidth = (lggColumnCount * (lggColumnWidth + lggGutterWidth));	var lggPageWidth = lggGridWidth + (2 * lggPageMargin);	var lggColorWhite = new SolidColor();	lggColorWhite.rgb.red = 255;	lggColorWhite.rgb.blue = 255;	lggColorWhite.rgb.green = 255;	var lggColorRed = new SolidColor();	lggColorRed.rgb.red = 255;	lggColorRed.rgb.blue = 0;	lggColorRed.rgb.green = 0;	var strtRulerUnits = app.preferences.rulerUnits;	app.preferences.rulerUnits = Units.PIXELS;	//Create a new document	var newDocumentRef = app.documents.add(lggPageMargin, lggPageHeight, 72.0, "Layout Grid - " + lggGridWidth + "px | " + lggColumnCount + " columns");	//Add the far right guide	dclAddGuide0();	dclAddLeftPadding(newDocumentRef, (lggGutterWidth / 2));	//Add guides in the middle	for(i=0; i<lggColumnCount-1; i++)	{		dclAddGuide0();		dclAddLeftPadding(newDocumentRef, lggColumnWidth);		dclAddGuide0();		dclAddLeftPadding(newDocumentRef, lggGutterWidth / 2);		dclAddGuide0();		dclAddLeftPadding(newDocumentRef, lggGutterWidth / 2);	}	//Add guide left of first column	dclAddGuide0();	dclAddLeftPadding(newDocumentRef, lggColumnWidth);	//Add guide for gutter	dclAddGuide0();	dclAddLeftPadding(newDocumentRef, (lggGutterWidth / 2));	//Add far left guide	dclAddGuide0();	dclAddLeftPadding(newDocumentRef, lggPageMargin);	//Make background white	newDocumentRef.selection.selectAll();	dclFillSelection(newDocumentRef, lggColorWhite);	//Make a new layer	newDocumentRef.artLayers.add();	newDocumentRef.artLayers[0].opacity = 10;	for(i = (lggPageMargin + (lggGutterWidth / 2)); i < (lggPageMargin + lggGridWidth); i += lggColumnWidth + lggGutterWidth)	{		dclSelectRectangle(newDocumentRef, i, 0, lggColumnWidth, lggPageHeight);		dclFillSelection(newDocumentRef, lggColorRed);		}	newDocumentRef.selection.deselect();	newDocumentRef.artLayers.add();	newDocumentRef = null;	app.preferences.rulerUnits = strtRulerUnits;}dclMain();